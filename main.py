import logging
from telegram.ext import Application, CommandHandler, ConversationHandler
from config import Config
from database.core import DatabaseManager
from handlers.registration import RegistrationHandlers
from handlers.menu.main import MainMenu
from handlers.menu.profile import ProfileMenu
from handlers.menu.search import SearchMenu
from handlers.connections import ConnectionHandlers
from handlers.notifications import NotificationHandlers
from utils.rate_limiter import RateLimiter
from utils.security import Security
from utils.geocoder import Geocoder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await DatabaseManager.execute(
            """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                phone_hash TEXT UNIQUE,
                full_name TEXT NOT NULL,
                city TEXT,
                lat REAL,
                lon REAL,
                skills TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )"""
        )
        
        await DatabaseManager.execute(
            """CREATE TABLE IF NOT EXISTS connections (
                connection_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_from INTEGER NOT NULL,
                user_to INTEGER NOT NULL,
                status TEXT CHECK(status IN ('pending', 'accepted', 'rejected')),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_from) REFERENCES users(user_id),
                FOREIGN KEY(user_to) REFERENCES users(user_id)
            )"""
        )
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        raise

def setup_handlers(app: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registration_handler = RegistrationHandlers.get_conversation_handler()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu_handlers = [
        CommandHandler('menu', MainMenu.show_main_menu),
        *MainMenu.get_handlers()
    ]
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_handler = ProfileMenu.get_conversation_handler()
    
    # –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞
    search_handler = SearchMenu.get_conversation_handler()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    connection_handlers = [
        ConnectionHandlers.get_conversation_handler(),
        *ConnectionHandlers.get_callbacks()
    ]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_handlers = NotificationHandlers.get_handlers()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        registration_handler,
        *menu_handlers,
        profile_handler,
        search_handler,
        *connection_handlers,
        *notification_handlers
    ]
    
    for handler in handlers:
        app.add_handler(handler)

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler('start', RegistrationHandlers.start))
    app.add_handler(CommandHandler('help', help_command))

async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/connect - –ù–∞–π—Ç–∏ —Å–≤—è–∑–∏\n"
    )
    await update.message.reply_text(help_text)

async def post_init(app: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await init_database()
    await Geocoder.warmup()  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–∫–æ–¥–µ—Ä–∞
    RateLimiter()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    logger.info("Application initialization complete")

def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = Application.builder() \
        .token(Config.TOKEN) \
        .post_init(post_init) \
        .build()

    setup_handlers(app)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    app.add_handler(MessageHandler(filters.ALL, Security.message_filter))
    
    logger.info("Starting bot in polling mode...")
    app.run_polling(
        poll_interval=1.0,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()