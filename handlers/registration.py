from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from utils.security import Security
from utils.geocoder import Geocoder, GeocodingError
from utils.validators import validate_geo, normalize_skills, ValidationError
from database.core import DatabaseManager
from config import Config

class RegistrationHandlers:
    @staticmethod
    async def verify_otp(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –§–ò–û"""
        user_code = update.message.text
        stored_secret = context.user_data.get('otp_secret')
        
        if not Security.verify_otp(stored_secret, user_code):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return Config.VERIFY_OTP
        
        del context.user_data['otp_secret']
        await update.message.reply_text("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return Config.ENTER_FULL_NAME

    @staticmethod
    async def enter_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
        full_name = update.message.text.strip()
        if len(full_name.split()) < 2:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            return Config.ENTER_FULL_NAME
        context.user_data['full_name'] = full_name
        await update.message.reply_text("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
        return Config.ENTER_CITY

    @staticmethod
    async def enter_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        city = update.message.text
        try:
            lat, lon = await Geocoder.get_coordinates(city)
        except GeocodingError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return Config.ENTER_CITY
        
        context.user_data.update({
            'city': city,
            'latitude': lat,
            'longitude': lon
        })
        
        await RegistrationHandlers._save_user_data(context)
        await RegistrationHandlers._show_main_menu(update)
        return ConversationHandler.END

    @staticmethod
    async def _save_user_data(context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = context.user_data
        phone_hash = Security.get_hash(user_data['phone'])
        
        await DatabaseManager.execute_query(
            '''
            INSERT INTO users 
            (user_id, phone_hash, full_name, city, lat, lon)
            VALUES (?, ?, ?, ?, ?, ?)
            ''',
            (
                context.user.id,
                phone_hash,
                user_data['full_name'],
                user_data['city'],
                user_data['latitude'],
                user_data['longitude']
            )
        )

    @staticmethod
    async def _show_main_menu(update: Update):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π", callback_data="search")]
            )
        )

    @staticmethod
    async def _handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        location = update.message.location
        user_data = context.user_data
        
        try:
            if not validate_geo(location.latitude, location.longitude):
                raise ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            
            country_code = await Geocoder.get_country_code(
                location.latitude, 
                location.longitude
            )
            
            user_data.update({
                'latitude': location.latitude,
                'longitude': location.longitude,
                'country_code': country_code
            })
            
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_profession")]]
            await update.message.reply_text(
                "üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            return Config.ENTER_PROFESSION
        
        except GeocodingError as e:
            await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
            return Config.ENTER_LOCATION

    @staticmethod
    async def _handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        raw_skills = update.message.text
        normalized = normalize_skills(raw_skills)
        
        if len(normalized) > 10:
            await update.message.reply_text("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–≤—ã–∫–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫:")
            return Config.ENTER_SKILLS
            
        context.user_data['skills'] = normalized
        await RegistrationHandlers._show_preview(update, context)
        return Config.CONFIRM_DATA

    @staticmethod
    async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        
        if not user.username:
            await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
            return ConversationHandler.END
        
        await DatabaseManager.execute_query(
            '''
            INSERT INTO users (user_id, username, full_name)
            VALUES (?, ?, ?)
            ''',
            (user.id, user.username, user.full_name)
        
        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return ConversationHandler.END
