from utils.security import Security

class RegistrationHandlers:
    @staticmethod
    async def verify_otp(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –§–ò–û"""
        user_code = update.message.text
        stored_secret = context.user_data.get('otp_secret')
        
        if not Security.verify_otp(stored_secret, user_code):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return Config.VERIFY_OTP
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        del context.user_data['otp_secret']
        
        await update.message.reply_text("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return Config.ENTER_FULL_NAME
        
class RegistrationHandlers:
    @staticmethod
    async def enter_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        full_name = update.message.text.strip()
        
        if len(full_name.split()) < 2:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            return Config.ENTER_FULL_NAME
            
        context.user_data['full_name'] = full_name
        await update.message.reply_text("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
        return Config.ENTER_CITY
        
from utils.geocoder import Geocoder

class RegistrationHandlers:
    @staticmethod
    async def enter_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        city = update.message.text
        
        try:
            lat, lon = await Geocoder.get_coordinates(city)
        except GeocodingError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return Config.ENTER_CITY
            
        context.user_data.update({
            'city': city,
            'latitude': lat,
            'longitude': lon
        })
        
        await self._save_user_data(context)
        await self._show_main_menu(update)
        return ConversationHandler.END
        
class RegistrationHandlers:
    async def _save_user_data(self, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        user_data = context.user_data
        phone_hash = Security.get_hash(user_data['phone'])
        
        async with Database() as db:
            await db.execute('''
                INSERT INTO users 
                (user_id, phone_hash, full_name, city, lat, lon)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                context.user.id,
                phone_hash,
                user_data['full_name'],
                user_data['city'],
                user_data['latitude'],
                user_data['longitude']
            ))
            await db.commit()
            
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from utils.validators import validate_geo, normalize_skills

class RegistrationHandlers:
    async def _handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        location = update.message.location
        user_data = context.user_data
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if not validate_geo(location.latitude, location.longitude):
                raise ValidationError("Invalid coordinates")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            country_code = await Geocoder.get_country_code(
                location.latitude, 
                location.longitude
            )
            
            user_data.update({
                'latitude': location.latitude,
                'longitude': location.longitude,
                'country_code': country_code
            })
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_profession")]
            ]
            
            await update.message.reply_text(
                "üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return Config.ENTER_PROFESSION
        
        except GeocodingError as e:
            await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {str(e)}")
            return Config.ENTER_LOCATION

    async def _handle_skills(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        raw_skills = update.message.text
        normalized = normalize_skills(raw_skills)
        
        if len(normalized) > 10:
            await update.message.reply_text("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–≤—ã–∫–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫:")
            return Config.ENTER_SKILLS
            
        context.user_data['skills'] = normalized
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await self._show_preview(update, context)
        return Config.CONFIRM_DATA
        
        async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username  # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ Telegram-–ø—Ä–æ—Ñ–∏–ª—è

    if not username:
        await update.message.reply_text("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await UserRepository.save_user(
        user_id=user.id,
        username=username,
        full_name=user.full_name,
        ...
    )