from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from database.user_repository import UserRepository
from utils.rate_limiter import RateLimiter

class ConnectionHandlers:
    @staticmethod
    async def init_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
            if not user.username:
        await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.")
        return ConversationHandler.END
        
        
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        async with RateLimiter().limit(user_id, 'connection_request', 3, 3600) as allowed:
            if not allowed:
                await update.message.reply_text("üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (3/—á–∞—Å)")
                return

        await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return 'WAIT_SEARCH_QUERY'

    @staticmethod
    async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
        search_term = update.message.text
        context.user_data['search_term'] = search_term
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await UserRepository.search_users(search_term)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        buttons = [
            [InlineKeyboardButton(f"{u.full_name} (@{u.nickname})", callback_data=f"connect_{u.user_id}")]
            for u in users[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ]
        
        await update.message.reply_text(
            "üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return 'HANDLE_CONNECTION_CHOICE'
        
    
    @staticmethod
    async def handle_connection_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        target_user_id = int(query.data.split('_')[1])
        initiator_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
        if await UserRepository.check_existing_connection(initiator_id, target_user_id):
            await query.edit_message_text("üö® –°–≤—è–∑—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ")
            return ConversationHandler.END
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        success = await ConnectionService.create_connection(
            user_from=initiator_id,
            user_to=target_user_id
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{initiator_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{initiator_id}")
                    ]
                ])
            )
            await query.edit_message_text("üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await query.edit_message_text("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            
        return ConversationHandler.END
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    @staticmethod
    async def show_connections(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        user_id = update.effective_user.id
        page = int(context.args[0]) if context.args else 0
        per_page = 5
        
        connections = await UserRepository.get_user_connections(user_id)
        total = len(connections)
        
        # –°–ª–∞–π—Å–∏–Ω–≥ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        start = page * per_page
        end = start + per_page
        page_connections = connections[start:end]
        
        if not page_connections:
            await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = ["üîó –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏:\n"]
        for i, conn in enumerate(page_connections, start + 1):
            message.append(
                f"{i}. {conn['full_name']} (@{conn['nickname']})\n"
                f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {conn['profession']}\n"
                f"–ù–∞–≤—ã–∫–∏: {conn['skills'][:50]}...\n"
                f"–¢–∏–ø: {'–∏—Å—Ö–æ–¥—è—â–∞—è' if conn['direction'] == 'outgoing' else '–≤—Ö–æ–¥—è—â–∞—è'}\n"
            )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        buttons = []
        if page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"conn_page_{page-1}"))
        if end < total:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"conn_page_{page+1}"))
        
        keyboard = [buttons] if buttons else None
        
        await update.message.reply_text(
            "\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
        )
        
    @staticmethod
    async def handle_connections_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        query = update.callback_query
        await query.answer()
        
        page = int(query.data.split("_")[-1])
        user_id = query.from_user.id
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await query.edit_message_text(
            text=await ConnectionHandlers._generate_connections_text(user_id, page),
            reply_markup=await ConnectionHandlers._generate_pagination_buttons(user_id, page)
        )
    
    @staticmethod
    async def _generate_connections_text(user_id: int, page: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        connections = await UserRepository.get_user_connections(user_id)
        start = page * 5
        end = start + 5
        
        message = [f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n"]
        for i, conn in enumerate(connections[start:end], start + 1):
            message.append(
                f"{i}. {conn['full_name']} (@{conn['nickname']})\n"
                f"–ù–∞–≤—ã–∫–∏: {conn['skills'][:50]}..."
            )
        return "\n".join(message)
    
    @staticmethod
    async def _generate_pagination_buttons(user_id: int, page: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        connections = await UserRepository.get_user_connections(user_id)
        total_pages = (len(connections) + 4) // 5
        
        buttons = []
        if page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"conn_page_{page-1}"))
        buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data=" "))
        if (page + 1) < total_pages:
            buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"conn_page_{page+1}"))
        
        return InlineKeyboardMarkup([buttons])
        
        
        class ConnectionHandlers:
    @staticmethod
    async def show_connections(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_connections"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Update
        user_id = update.effective_user.id
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # –ü—Ä–∏–º–µ—Ä: /my_connections 2 ‚Üí page = 2
        page = int(context.args[0]) if context.args else 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        per_page = 5
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        connections = await UserRepository.get_user_connections(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        total = len(connections)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start = page * per_page
        end = start + per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_connections = connections[start:end]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = ["üîó –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏:\n"]
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i, conn in enumerate(page_connections, start + 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏
            connection_info = (
                f"{i}. {conn['full_name']} (@{conn['nickname']})\n"
                f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {conn['profession']}\n"
                f"–ù–∞–≤—ã–∫–∏: {conn['skills'][:50]}...\n"  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                f"–¢–∏–ø: {'–∏—Å—Ö–æ–¥—è—â–∞—è' if conn['direction'] == 'outgoing' else '–≤—Ö–æ–¥—è—â–∞—è'}\n"
            )
            message_lines.append(connection_info)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page > 0:
            buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"conn_page_{page-1}")
            )
            
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if end < total:
            buttons.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"conn_page_{page+1}")
            )

        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup([buttons]) if buttons else None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text="\n".join(message_lines),
            reply_markup=keyboard
        )
        
    @staticmethod
    async def handle_connections_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data (conn_page_2 ‚Üí 2)
        page = int(query.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = await ConnectionHandlers._generate_connections_text(user_id, page)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        new_keyboard = await ConnectionHandlers._generate_pagination_buttons(user_id, page)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=new_text,
            reply_markup=new_keyboard
        )
    
    @staticmethod
    async def _generate_connections_text(user_id: int, page: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–≤—è–∑—è–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã
        connections = await UserRepository.get_user_connections(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start = page * 5
        end = start + 5
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        message_lines = [f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏
        for i, conn in enumerate(connections[start:end], start + 1):
            conn_line = (
                f"{i}. {conn['full_name']} (@{conn['nickname']})\n"
                f"–ù–∞–≤—ã–∫–∏: {conn['skills'][:50]}..."
            )
            message_lines.append(conn_line)
            
        return "\n".join(message_lines)
    
    @staticmethod
    async def _generate_pagination_buttons(user_id: int, page: int):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        connections = await UserRepository.get_user_connections(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (len(connections) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        buttons = []
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if page > 0:
            buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"conn_page_{page-1}")
            )
            
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
        buttons.append(
            InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data=" ")
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if (page + 1) < total_pages:
            buttons.append(
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"conn_page_{page+1}")
            )
            
        return InlineKeyboardMarkup([buttons])
        
    async def handle_connection_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    target_user_id = int(query.data.split('_')[1])
    initiator_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º username –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    initiator = await UserRepository.get_user(initiator_id)
    target_user = await UserRepository.get_user(target_user_id)

    if not initiator.username or not target_user.username:
        await query.edit_message_text("‚ö†Ô∏è –î–ª—è —Å–≤—è–∑–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å username.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏
    await ConnectionService.update_connection_status(target_user_id, initiator_id, "accepted")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –¥—Ä—É–≥ –¥—Ä—É–≥—É
    await context.bot.send_message(
        chat_id=initiator_id,
        text=f"‚úÖ {target_user.full_name} (@{target_user.username}) –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
    )

    await context.bot.send_message(
        chat_id=target_user_id,
        text=f"‚úÖ –í—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º username —Å {initiator.full_name} (@{initiator.username})!"
    )
