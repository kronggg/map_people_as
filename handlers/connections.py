from telegram import (
    Update, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    LabeledPrice, 
    ShippingOption
)
from telegram.ext import (
    ConversationHandler,
    ContextTypes, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters
)
from config import Config
from database.core import DatabaseManager
from utils.rate_limiter import RateLimiter
from utils.security import Security
import logging
import re

logger = logging.getLogger(__name__)

class ConnectionHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    @staticmethod
    async def init_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not RateLimiter().check(user_id, 'connection'):
            await update.message.reply_text("üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (3/—á–∞—Å)")
            return

        await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return Config.SEARCH_QUERY

    @staticmethod
    async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        search_terms = [term.strip().lower() for term in update.message.text.split(',')]
        context.user_data['search_terms'] = search_terms

        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
            results = await DatabaseManager.fetch(
                """SELECT user_id, full_name, skills 
                FROM users 
                WHERE LOWER(skills) LIKE ? 
                LIMIT ?""",
                (f"%{search_terms[0]}%", Config.SEARCH_RESULTS_LIMIT)
            )

            if not results:
                await update.message.reply_text("üòû –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return ConversationHandler.END

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(
                    f"{row[1]} ({row[2][:15]}...)",
                    callback_data=f"conn_select_{row[0]}"
                )] for row in results
            ]

            await update.message.reply_text(
                "üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return Config.CONNECTION_SELECT

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return ConversationHandler.END

    @staticmethod
    async def handle_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        target_user_id = int(query.data.split('_')[-1])
        initiator_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤—è–∑–∏
        existing = await DatabaseManager.fetch_one(
            """SELECT 1 FROM connections 
            WHERE (user_from = ? AND user_to = ?)
            OR (user_from = ? AND user_to = ?)""",
            (initiator_id, target_user_id, target_user_id, initiator_id)
        )

        if existing:
            await query.edit_message_text("‚ö†Ô∏è –°–≤—è–∑—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        await DatabaseManager.execute(
            """INSERT INTO connections 
            (user_from, user_to, status) 
            VALUES (?, ?, 'pending')""",
            (initiator_id, target_user_id)
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç @{query.from_user.username}!\n"
                     f"–ù–∞–≤—ã–∫–∏: {', '.join(context.user_data['search_terms'])}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"conn_accept_{initiator_id}"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"conn_reject_{initiator_id}")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        await query.edit_message_text("üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return ConversationHandler.END

    @staticmethod
    async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏"""
        query = update.callback_query
        await query.answer()
        
        action, initiator_id = query.data.split('_')[1:]
        target_user_id = query.from_user.id

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∑–∏
        new_status = 'accepted' if action == 'accept' else 'rejected'
        await DatabaseManager.execute(
            """UPDATE connections 
            SET status = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE user_from = ? AND user_to = ?""",
            (new_status, initiator_id, target_user_id)
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        try:
            status_text = "–ø—Ä–∏–Ω—è–ª" if new_status == 'accepted' else "–æ—Ç–∫–ª–æ–Ω–∏–ª"
            await context.bot.send_message(
                chat_id=initiator_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} {status_text} –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")
        return ConversationHandler.END

    @staticmethod
    def get_conversation_handler(cls):
        return ConversationHandler(
        entry_points=[CommandHandler('connect', cls.init_connection)],
        states={
            Config.SEARCH_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, cls.handle_search)
            ],
            Config.CONNECTION_SELECT: [
                CallbackQueryHandler(cls.handle_selection, pattern=r"^conn_select_\d+$")
            ]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)],
        per_message=False
    )

    @staticmethod
    def get_callbacks():
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return [
            CallbackQueryHandler(
                ConnectionHandlers.handle_response, 
                pattern=r"^conn_(accept|reject)_\d+$"
            )
        ]
