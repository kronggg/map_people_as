import redis
from config import Config
import logging
from functools import wraps
from typing import Optional, Callable
import time

logger = logging.getLogger(__name__)

class RateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self._redis = None
        self._default_limits = {
            'registration': (5, 3600),      # 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ —á–∞—Å
            'connection_request': (3, 3600),# 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Å
            'message': (10, 3600),          # 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
            'api_call': (100, 86400)        # 100 –≤—ã–∑–æ–≤–æ–≤ API –≤ —Å—É—Ç–∫–∏
        }
        
    @property
    def redis(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
        if not self._redis or self._redis.ping() is False:
            try:
                self._redis = redis.Redis.from_url(Config.REDIS_URL)
                self._redis.ping()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            except redis.RedisError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
                raise
        return self._redis

    def check(
        self, 
        user_id: int, 
        action: str, 
        custom_limit: Optional[tuple] = None
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ –∏ —Ç.–¥.)
            custom_limit: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ª–∏–º–∏—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        
        Returns:
            bool: True –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω
        """
        try:
            limit, period = custom_limit or self._default_limits.get(
                action, 
                (5, 3600)  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏–º–∏—Ç
            )
            
            key = f"rate_limit:{user_id}:{action}"
            current = self.redis.incr(key)
            
            if current == 1:
                self.redis.expire(key, period)
                return True
                
            return current <= limit
            
        except redis.RedisError as e:
            logger.error(f"RateLimiter error: {e}")
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å Redis

    def get_remaining(self, user_id: int, action: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            limit, _ = self._default_limits.get(action, (5, 3600))
            current = int(self.redis.get(f"rate_limit:{user_id}:{action}") or 0)
            return max(limit - current, 0)
        except redis.RedisError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞: {e}")
            return limit  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

    def reset_limit(self, user_id: int, action: str) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            self.redis.delete(f"rate_limit:{user_id}:{action}")
        except redis.RedisError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {e}")

    @staticmethod
    def limit_action(action: str, **limiter_kwargs):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–µ—Ä–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        
        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        @RateLimiter.limit_action('registration')
        async def handler(update, context):
            ...
        """
        def decorator(func: Callable):
            @wraps(func)
            async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
                user_id = update.effective_user.id
                limiter = RateLimiter()
                
                if not limiter.check(user_id, action, **limiter_kwargs):
                    await update.message.reply_text(
                        f"üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({action}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                return await func(update, context)
            return wrapper
        return decorator